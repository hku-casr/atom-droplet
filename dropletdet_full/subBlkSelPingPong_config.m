
function subblkselpingpong_config(this_block)

  % Revision History:
  %
  %   07-Jun-2016  (18:14 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /home/casrm/hcng_nov_m2/fpt_classifier/vpingpong_simulk/subBlkSelPingPong.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('subblkselpingpong');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('reset');
  this_block.addSimulinkInport('d15');
  this_block.addSimulinkInport('d14');
  this_block.addSimulinkInport('d13');
  this_block.addSimulinkInport('d12');
  this_block.addSimulinkInport('d11');
  this_block.addSimulinkInport('d10');
  this_block.addSimulinkInport('d09');
  this_block.addSimulinkInport('d08');
  this_block.addSimulinkInport('d07');
  this_block.addSimulinkInport('d06');
  this_block.addSimulinkInport('d05');
  this_block.addSimulinkInport('d04');
  this_block.addSimulinkInport('d03');
  this_block.addSimulinkInport('d02');
  this_block.addSimulinkInport('d01');
  this_block.addSimulinkInport('d00');
  this_block.addSimulinkInport('sft');
  this_block.addSimulinkInport('next_sft');
  this_block.addSimulinkInport('eol');
  this_block.addSimulinkInport('blkgap');

  this_block.addSimulinkOutport('q15');
  this_block.addSimulinkOutport('q14');
  this_block.addSimulinkOutport('q13');
  this_block.addSimulinkOutport('q12');
  this_block.addSimulinkOutport('q11');
  this_block.addSimulinkOutport('q10');
  this_block.addSimulinkOutport('q09');
  this_block.addSimulinkOutport('q08');
  this_block.addSimulinkOutport('q07');
  this_block.addSimulinkOutport('q06');
  this_block.addSimulinkOutport('q05');
  this_block.addSimulinkOutport('q04');
  this_block.addSimulinkOutport('q03');
  this_block.addSimulinkOutport('q02');
  this_block.addSimulinkOutport('q01');
  this_block.addSimulinkOutport('q00');

  q15_port = this_block.port('q15');
  q15_port.setType('UFix_8_0');
  q14_port = this_block.port('q14');
  q14_port.setType('UFix_8_0');
  q13_port = this_block.port('q13');
  q13_port.setType('UFix_8_0');
  q12_port = this_block.port('q12');
  q12_port.setType('UFix_8_0');
  q11_port = this_block.port('q11');
  q11_port.setType('UFix_8_0');
  q10_port = this_block.port('q10');
  q10_port.setType('UFix_8_0');
  q09_port = this_block.port('q09');
  q09_port.setType('UFix_8_0');
  q08_port = this_block.port('q08');
  q08_port.setType('UFix_8_0');
  q07_port = this_block.port('q07');
  q07_port.setType('UFix_8_0');
  q06_port = this_block.port('q06');
  q06_port.setType('UFix_8_0');
  q05_port = this_block.port('q05');
  q05_port.setType('UFix_8_0');
  q04_port = this_block.port('q04');
  q04_port.setType('UFix_8_0');
  q03_port = this_block.port('q03');
  q03_port.setType('UFix_8_0');
  q02_port = this_block.port('q02');
  q02_port.setType('UFix_8_0');
  q01_port = this_block.port('q01');
  q01_port.setType('UFix_8_0');
  q00_port = this_block.port('q00');
  q00_port.setType('UFix_8_0');

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('reset').width ~= 1);
      this_block.setError('Input data type for port "reset" must have width=1.');
    end

    this_block.port('reset').useHDLVector(false);

    if (this_block.port('d15').width ~= 8);
      this_block.setError('Input data type for port "d15" must have width=8.');
    end

    if (this_block.port('d14').width ~= 8);
      this_block.setError('Input data type for port "d14" must have width=8.');
    end

    if (this_block.port('d13').width ~= 8);
      this_block.setError('Input data type for port "d13" must have width=8.');
    end

    if (this_block.port('d12').width ~= 8);
      this_block.setError('Input data type for port "d12" must have width=8.');
    end

    if (this_block.port('d11').width ~= 8);
      this_block.setError('Input data type for port "d11" must have width=8.');
    end

    if (this_block.port('d10').width ~= 8);
      this_block.setError('Input data type for port "d10" must have width=8.');
    end

    if (this_block.port('d09').width ~= 8);
      this_block.setError('Input data type for port "d09" must have width=8.');
    end

    if (this_block.port('d08').width ~= 8);
      this_block.setError('Input data type for port "d08" must have width=8.');
    end

    if (this_block.port('d07').width ~= 8);
      this_block.setError('Input data type for port "d07" must have width=8.');
    end

    if (this_block.port('d06').width ~= 8);
      this_block.setError('Input data type for port "d06" must have width=8.');
    end

    if (this_block.port('d05').width ~= 8);
      this_block.setError('Input data type for port "d05" must have width=8.');
    end

    if (this_block.port('d04').width ~= 8);
      this_block.setError('Input data type for port "d04" must have width=8.');
    end

    if (this_block.port('d03').width ~= 8);
      this_block.setError('Input data type for port "d03" must have width=8.');
    end

    if (this_block.port('d02').width ~= 8);
      this_block.setError('Input data type for port "d02" must have width=8.');
    end

    if (this_block.port('d01').width ~= 8);
      this_block.setError('Input data type for port "d01" must have width=8.');
    end

    if (this_block.port('d00').width ~= 8);
      this_block.setError('Input data type for port "d00" must have width=8.');
    end

    if (this_block.port('sft').width ~= 4);
      this_block.setError('Input data type for port "sft" must have width=4.');
    end

    if (this_block.port('next_sft').width ~= 4);
      this_block.setError('Input data type for port "next_sft" must have width=4.');
    end

    if (this_block.port('eol').width ~= 1);
      this_block.setError('Input data type for port "eol" must have width=1.');
    end

    this_block.port('eol').useHDLVector(false);

    if (this_block.port('blkgap').width ~= 1);
      this_block.setError('Input data type for port "blkgap" must have width=1.');
    end

    this_block.port('blkgap').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('../vpingpong_simulk/twoToOneMuxReg.v');
  this_block.addFile('../vpingpong_simulk/sixteenToOneMuxTakeBlk_Pipe4.v');
  this_block.addFile('../vpingpong_simulk/eachBlkToEachPingPong_Pipe6.v');
  this_block.addFile('../vpingpong_simulk/eachBlkToEachPang_Pipe5.v');
  this_block.addFile('../vpingpong_simulk/muxPang_Pipe5.v');
  this_block.addFile('../vpingpong_simulk/subBlkSelPingPong.v');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

